Build a styled professional looking saas web frontend that allows users to interact with the API defined under FastAPI below.

The frontend should be able to:
- Display a list of all the checks
- View the details of a check
- Enter a new check
- Edit an existing check
- Delete a check
- Search for a check by code
- Search for a check by description

Use the following technologies:
- React
- Redux
- Next.js
- Material-UI
- Axios
- Formik
- Yup
- Docker
- Tailwind CSS

FastAPI

# Route to get all records from CHKREG_2024
@app.get("/chkreg", response_model=list[CHKREGCreate])
def get_all_records(db: Session = Depends(get_db)):
    return db.query(CHKREG).all()

# Route to get a record by CheckNO
@app.get("/chkreg/{check_no}", response_model=CHKREGCreate)
def get_record_by_check_no(check_no: str, db: Session = Depends(get_db)):
    record = db.query(CHKREG).filter(CHKREG.CheckNO == check_no).first()
    if not record:
        raise HTTPException(status_code=404, detail="Record not found")
    return record

# Route to get records by CheckCode
@app.get("/chkreg/code/{check_code}", response_model=list[CHKREGCreate])
def get_records_by_check_code(check_code: str, db: Session = Depends(get_db)):
    return db.query(CHKREG).filter(CHKREG.checkCode == check_code).all()

# Route to get records with checkAmount greater than a given amount
@app.get("/chkreg/amount_greater/{amount}", response_model=list[CHKREGCreate])
def get_records_by_amount_greater(amount: float, db: Session = Depends(get_db)):
    return db.query(CHKREG).filter(CHKREG.checkAmount > amount).all()

# Route to get records with checkDate between two given dates
@app.get("/chkreg/date_range", response_model=list[CHKREGCreate])
def get_records_by_date_range(start_date: str, end_date: str, db: Session = Depends(get_db)):
    return db.query(CHKREG).filter(CHKREG.checkDate.between(start_date, end_date)).all()

# Route to get records by checkDescription containing a given string
@app.get("/chkreg/description/{description}", response_model=list[CHKREGCreate])
def get_records_by_description(description: str, db: Session = Depends(get_db)):
    return db.query(CHKREG).filter(CHKREG.checkDescription.ilike(f"%{description}%")).all()

# Route to get records by checkUserDef1 or checkUserDef2 matching a given string
@app.get("/chkreg/userdef/{userdef}", response_model=list[CHKREGCreate])
def get_records_by_userdef(userdef: str, db: Session = Depends(get_db)):
    return db.query(CHKREG).filter(or_(CHKREG.checkUserDef1 == userdef, CHKREG.checkUserDef2 == userdef)).all()

# Route to update a record by CheckNO
@app.put("/chkreg/{check_no}", response_model=CHKREGCreate)
def update_record(check_no: str, updated_data: CHKREGCreate, db: Session = Depends(get_db)):
    record = db.query(CHKREG).filter(CHKREG.CheckNO == check_no).first()
    if not record:
        raise HTTPException(status_code=404, detail="Record not found")
    for key, value in updated_data.dict().items():
        setattr(record, key, value)
    db.commit()
    db.refresh(record)
    return record

# Route to delete a record by CheckNO
@app.delete("/chkreg/{check_no}")
def delete_record(check_no: str, db: Session = Depends(get_db)):
    record = db.query(CHKREG).filter(CHKREG.CheckNO == check_no).first()
    if not record:
        raise HTTPException(status_code=404, detail="Record not found")
    db.delete(record)
    db.commit()
    return {"detail": "Record deleted successfully"}

# Route to insert a new record
@app.post("/chkreg", response_model=CHKREGCreate)
def create_record(new_record: CHKREGCreate, db: Session = Depends(get_db)):
    record = CHKREG(**new_record.dict())
    db.add(record)
    db.commit()
    db.refresh(record)
    return record

